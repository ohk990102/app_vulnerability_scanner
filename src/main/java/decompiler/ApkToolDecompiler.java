package decompiler;

import config.Config;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.concurrent.TimeUnit;

public class ApkToolDecompiler extends Decompiler {
    public String apkToolVersion;

    public ApkToolDecompiler(Path apkToolPath) throws IOException {
        super(apkToolPath);
        if (!Files.exists(apkToolPath)) {
            throw new FileNotFoundException("Cannot find apktool.");
        }
        byte[] b = new byte[0x10];

        Process test = new ProcessBuilder("java", "-jar", apkToolPath.toString(), "--version").start();
        test.getInputStream().read(b);
        try {
            if (test.waitFor() != 0) {
                throw new IOException("Could not properly execute test command.");
            }
        } catch (InterruptedException e) {
            throw new IOException("Could not properly execute test command.");
        }
        this.apkToolVersion = new String(b, StandardCharsets.UTF_8).trim();
    }

    public boolean decompileApk(Path destPath, Path targetFile) {
        try {
            Process decompile = new ProcessBuilder("java", "-jar", this.decompilerPath.toString(), "d", "-s", "-f", "-o", destPath.toString(), targetFile.toString()).start();
            if (!decompile.waitFor(Config.decompileTimeout, TimeUnit.SECONDS))
                return false;
            if (decompile.exitValue() != 0)
                return false;
            return true;
        } catch (Exception e) {
            return false;
        }
    }
}
